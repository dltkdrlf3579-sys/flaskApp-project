===requirements.txt===
Flask>=3.0
Werkzeug>=3.1
MarkupSafe>=1.0
===app.py===
import os
from flask import Flask, render_template, request, session, redirect, url_for, flash
from werkzeug.serving import run_simple
from config.menu import MENU_CONFIG
import sqlite3

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'default-secret-key-for-dev')

DB_PATH = os.environ.get('DB_PATH', 'portal.db')
PASSWORD = os.environ.get('EDIT_PASSWORD', 'admin123')

def init_db():
    """메뉴 설정의 소메뉴를 DB로 시드 (없을 때만)."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS pages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT UNIQUE,
            title TEXT,
            content TEXT
        )
    ''')
    
    # 메뉴 설정에서 페이지 자동 생성
    for category in MENU_CONFIG:
        for submenu in category['submenu']:
            cursor.execute("SELECT COUNT(*) FROM pages WHERE url = ?", (submenu['url'],))
            if cursor.fetchone()[0] == 0:
                cursor.execute(
                    "INSERT INTO pages (url, title, content) VALUES (?, ?, ?)",
                    (submenu['url'], submenu['title'], 
                     f"<h1>{submenu['title']}</h1><p>이 페이지의 내용을 편집하세요.</p>")
                )
    
    conn.commit()
    conn.close()

@app.before_request
def before_request():
    init_db()

@app.route("/")
def index():
    return render_template("index.html", menu=MENU_CONFIG)

@app.route("/<path:url>")
def page_view(url):
    conn = sqlite3.connect(DB_PATH)
    page = conn.execute("SELECT * FROM pages WHERE url = ?", (url,)).fetchone()
    conn.close()
    
    if not page:
        return "Page not found", 404
    
    return render_template("page.html", 
                         page={'url': page[1], 'title': page[2], 'content': page[3]},
                         menu=MENU_CONFIG)

@app.route("/<path:url>/edit", methods=["GET", "POST"])
def page_edit(url):
    if not session.get('edit_mode'):
        flash("편집 권한이 없습니다.", "error")
        return redirect(url_for('page_view', url=url))
    
    conn = sqlite3.connect(DB_PATH)
    page = conn.execute("SELECT * FROM pages WHERE url = ?", (url,)).fetchone()
    conn.close()
    
    if not page:
        return "Page not found", 404
    
    if request.method == "POST":
        title = request.form.get("title", "").strip()
        content = request.form.get("content", "").strip()
        
        if not title:
            title = "제목을 입력하세요."
        
        conn = sqlite3.connect(DB_PATH)
        conn.execute("UPDATE pages SET title = ?, content = ? WHERE url = ?", 
                    (title, content, url))
        conn.commit()
        conn.close()
        
        flash("저장되었습니다.", "success")
        return redirect(url_for('page_view', url=url))
    
    return render_template("edit.html", 
                         page={'url': page[1], 'title': page[2], 'content': page[3]},
                         menu=MENU_CONFIG)

@app.route("/unlock", methods=["GET", "POST"])
def unlock():
    if request.method == "POST":
        password = request.form.get("password", "")
        if password == PASSWORD:
            session['edit_mode'] = True
            flash("편집모드가 활성화되었습니다.", "success")
            return redirect(url_for('index'))
        else:
            flash("비밀번호가 올바르지 않습니다.", "error")
    
    return render_template("unlock.html", menu=MENU_CONFIG)

@app.route("/lock")
def lock():
    session.pop('edit_mode', None)
    flash("편집모드를 종료했습니다.", "info")
    return redirect(url_for('index'))

if __name__ == "__main__":
    app.run(host="127.0.0.1", port=5000, debug=True)
===config/menu.py===
# 상단 대메뉴/소메뉴는 여기서만 관리
MENU_CONFIG = [
    {
        "title": "안전관리",
        "submenu": [
            {"title": "공지사항", "url": "safety-notice"},
            {"title": "사고사례", "url": "safety-case"},
        ],
    },
    {
        "title": "협력사",
        "submenu": [
            {"title": "협력사공지", "url": "partner-notice"},
            {"title": "평가/개선", "url": "partner-improve"},
        ],
    },
    {
        "title": "자료실",
        "submenu": [
            {"title": "양식", "url": "forms"},
            {"title": "가이드", "url": "guide"},
        ],
    },
]
===templates/base.html===
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{{ title }}{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        {% block style %}{% endblock %}
        /* 드롭다운 메뉴 (호버 시에만 PC에서 표시) */
        @media (min-width: 992px) {
            .navbar-nav .dropdown:hover .dropdown-menu {
                display: block;
                margin-top: 0;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('index') }}">{{ title }}</a>
            <div class="d-flex me-3" id="navbarNav">
                <ul class="navbar-nav">
                </ul>
            </div>
            <div class="ms-auto" id="edit-controls">
                {% for message in get_flashed_messages(with_categories=true) %}
                    {% set category, message = message %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else 'success' if category == 'success' else 'info' }} alert-dismissible fade show" role="alert">
                        {{ message }}
                    </div>
                {% endfor %}
                <div class="btn-group">
                    {% if session.get('edit_mode') %}
                        <a class="btn btn-outline-light btn-sm" href="{{ url_for('lock') }}">편집잠금</a>
                    {% else %}
                        <a class="btn btn-outline-light btn-sm" href="{{ url_for('unlock') }}">편집해제</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% if menu %}
            {% set edit_mode = session.get('edit_mode', false) %}
            {% if menu %}
                <div class="row mb-4">
                    {% for category in menu %}
                        <div class="col-auto dropdown">
                            <button class="btn btn-outline-{{ 'primary' if category.title == '' else 'secondary' }} dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                {{ category.title }}
                            </button>
                            {% if category.submenu %}
                                <ul class="dropdown-menu">
                                    {% for submenu in category.submenu %}
                                        <li><a class="dropdown-item" href="{{ url_for('page_view', url=submenu.url) }}">{{ submenu.title }}</a></li>
                                    {% endfor %}
                                </ul>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
        {% endif %}{% endif %}
        
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
===templates/index.html===
{% extends "base.html" %}
{% block title %}메인{% endblock %}
{% block content %}
<div class="text-center py-4">
    <h1 class="display-4">메인화면</h1>
    <p class="lead fs-5 text-muted">상단 대메뉴에서 소메뉴를 선택하세요.</p>
</div>
{% endblock %}
===templates/page.html===
{% extends "base.html" %}
{% block title %}{{ page.title }}{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center border-bottom pb-3 mb-3">
    <h1 class="h3 mb-0">{{ page.title }}</h1>
    {% if session.get('edit_mode') %}
        <a class="btn btn-outline-primary btn-sm" href="{{ url_for('page_edit', url=page.url) }}">편집</a>
    {% endif %}
</div>
<div class="content">
    <div class="mb-4">
        {{ page.content|safe }}
    </div>
</div>
{% endblock %}
===templates/edit.html===
{% extends "base.html" %}
{% block title %}편집: {{ page.title }}{% endblock %}
{% block content %}
<h1 class="h3 mb-3">페이지 편집</h1>
<form method="post">
    <div class="mb-3">
        <label class="form-label">제목</label>
        <input type="text" name="title" class="form-control" value="{{ page.title }}">
    </div>
    <div class="mb-3">
        <label class="form-label">본문 (HTML 허용)</label>
        <textarea name="content" class="form-control" rows="14">{{ page.content }}</textarea>
        <div class="form-text">간단한 HTML 태그 사용 가능. (예: &lt;h4&gt;, &lt;p&gt;, &lt;strong&gt;)</div>
    </div>
    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">저장</button>
        <a class="btn btn-secondary" href="{{ url_for('page_view', url=page.url) }}">취소</a>
    </div>
</form>
{% endblock %}
===templates/unlock.html===
{% extends "base.html" %}
{% block title %}편집해제{% endblock %}
{% block content %}
<div class="row justify-content-center">
    <div class="col-md-4">
        <h1 class="h3 mb-3">편집해제</h1>
        <form method="post" action="{{ url_for('unlock') }}">
            <div class="mb-3">
                <label class="form-label">공유 비밀번호</label>
                <input type="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">확인</button>
            <div class="form-text mt-2">*올바른 비밀번호 입력 시 편집 버튼 활성화</div>
        </form>
    </div>
</div>
{% endblock %}
