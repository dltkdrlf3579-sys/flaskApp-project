{% if is_popup %}
{% extends "popup-base.html" %}
{% else %}
{% extends "base.html" %}
{% endif %}

{% block head %}
{% endblock %}

{% block title %}환경안전 지시서 상세정보{% endblock %}
{% block popup_title %}{{ instruction.issue_number }} - 환경안전 지시서 상세정보{% endblock %}
{% block content %}

{% if not is_popup %}
<div class="page-header">
    <h2 class="page-title">환경안전 지시서 상세정보</h2>
    <div class="breadcrumb">
        <a href="{{ url_for('page_view', url='safety-instruction') }}">환경안전 지시서</a>
        <span class="separator">></span>
        <span class="current">{{ instruction.issue_number }}</span>
    </div>
</div>
{% endif %}

<div class="safety-instruction-detail-container">
    {# 리스트 타입 필드가 섹션별 중복 등록되어도 한 번만 렌더링하도록 추적 #}
    {% set rendered_list_keys = [] %}
    <!-- 동적 섹션 렌더링 -->
    {% for section in sections %}
    <div class="section {% if section.section_key == 'basic_info' %}basic-info{% elif section.section_key == 'violation_info' %}violation-info{% elif section.section_key == 'additional' %}additional{% else %}{{ section.section_key|replace('_', '-') }}{% endif %}-section">
        <div class="section-header">
            <h3 class="section-title">{{ section.section_name }}</h3>
            <button class="collapse-btn" onclick="toggleSection('{% if section.section_key == 'basic_info' %}basic-info{% elif section.section_key == 'violation_info' %}violation-info{% elif section.section_key == 'additional' %}additional{% else %}{{ section.section_key|replace('_', '-') }}{% endif %}')">
                <span class="collapse-icon">▲</span>
            </button>
        </div>
        <div class="section-content" id="{% if section.section_key == 'basic_info' %}basic-info{% elif section.section_key == 'violation_info' %}violation-info{% elif section.section_key == 'additional' %}additional{% else %}{{ section.section_key|replace('_', '-') }}{% endif %}-content">
            <div class="info-table">
                {% set all_columns = section_columns[section.section_key] %}
                
                <!-- safety_instruction_id와 created_at 추가 (첫 번째 섹션에만) -->
                {% if loop.index == 1 %}
                <div class="info-row">
                    <div class="info-cell span-1">
                        <label>발부번호</label>
                        <input type="text" value="{{ instruction.issue_number or '-' }}" readonly style="background-color: #f3f4f6;">
                    </div>
                    <div class="info-cell span-1">
                        <label>등록일</label>
                        <input type="text" value="{{ (instruction.created_at|date_only) if instruction.created_at else '-' }}" readonly style="background-color: #f3f4f6;">
                    </div>
                </div>
                {% endif %}
                
                <!-- detailed_content와 violation_content는 제외 -->
                {% set columns = [] %}
                {% for col in all_columns %}
                    {% if col.column_key not in ['detailed_content', 'violation_content'] %}
                        {% set _ = columns.append(col) %}
                    {% endif %}
                {% endfor %}
                {% set columns_per_row = 4 %}
                
                <!-- batch 방식으로 4개씩 묶어서 처리 -->
                {% for chunk in columns | batch(columns_per_row, '') %}
                <div class="info-row">
                    {% for col in chunk %}
                        {% if col %}
                            {% set span = col.column_span|default(1)|int %}
                            {% if col.column_type == 'list' %}
                                {% set span = 4 %}
                            {% endif %}
                            {% if col.column_key == 'created_at' %}
                                {% set col_value = instruction.created_at | date_only if instruction.created_at else '' %}
                            {% else %}
                                {% set col_value = instruction[col.column_key] | default('', true) %}
                            {% endif %}
                            
                            <div class="info-cell {% if span > 1 %}span-{{ span }}{% endif %}">
                                {# 렌더 타입 계산: 전역 키 + custom_data로 그룹 추정 #}
                                {% set render_type = col.column_type %}
                                {% if not render_type or render_type == 'text' %}
                                    {% set suffixes = ['_id','_dept','_bizno','_code','_company'] %}
                                    {% set base_key = col.column_key %}
                                    {% for s in suffixes %}
                                        {% if base_key.endswith(s) %}
                                            {% set base_key = base_key[:-s|length] %}
                                        {% endif %}
                                    {% endfor %}
                                    {% set all_keys = (dynamic_columns | map(attribute='column_key') | list) + ((custom_data.keys() | list) if custom_data else []) %}
                                    {% set group = '' %}
                                    {% if (base_key ~ '_bizno') in all_keys %}
                                        {% set group = 'company' %}
                                    {% elif (base_key ~ '_dept') in all_keys %}
                                        {% set group = 'person' %}
                                    {% elif (base_key ~ '_code') in all_keys %}
                                        {% set group = 'department' %}
                                    {% elif (base_key ~ '_company') in all_keys %}
                                        {% set group = 'contractor' %}
                                    {% endif %}
                                    {% if group == 'person' %}
                                        {% set render_type = 'popup_person' %}
                                    {% elif group == 'company' %}
                                        {% set render_type = 'popup_company' %}
                                    {% elif group == 'department' %}
                                        {% set render_type = 'popup_department' %}
                                    {% elif group == 'contractor' %}
                                        {% set render_type = 'popup_contractor' %}
                                    {% endif %}
                                {% endif %}

                                {% if col.column_type != 'list' %}
                                <label>{{ col.column_name }}</label>
                                {% endif %}
                                
                                {% if col.column_key == 'issue_number' %}
                                    <!-- 발부번호는 수정 불가 -->
                                    <div class="value">{{ col_value or '-' }}</div>
                                    
                                {% elif render_type == 'dropdown' %}
                                    <!-- 드롭다운 필드 -->
                                    <select class="{{ section.section_key|replace('_', '-') }}-input" 
                                            data-field="{{ col.column_key }}"
                                            data-section="{{ section.section_key }}">
                                        <option value="">선택하세요</option>
                                        {% if col.column_key in basic_options %}
                                            {% for opt in basic_options[col.column_key] %}
                                            <option value="{{ opt.code }}" 
                                                    {% if opt.code == col_value %}selected{% endif %}>
                                                {{ opt.value }}
                                            </option>
                                            {% endfor %}
                                        {% elif col.dropdown_options_mapped %}
                                            {% for opt in col.dropdown_options_mapped %}
                                            <option value="{{ opt.code }}"
                                                    {% if opt.code == col_value %}selected{% endif %}>
                                                {{ opt.value }}
                                            </option>
                                            {% endfor %}
                                        {% endif %}
                                    </select>
                                    
                                {% elif col.column_type == 'date' %}
                                    <!-- 날짜 필드 -->
                                    <input type="date" 
                                           class="{{ section.section_key|replace('_', '-') }}-input" 
                                           data-field="{{ col.column_key }}"
                                           data-section="{{ section.section_key }}"
                                           value="{{ col_value }}"
                                           {% if col.column_key == 'created_at' %}
                                           readonly
                                           style="background-color: #f3f4f6;"
                                           {% endif %}>
                                           
                                {% elif render_type == 'number' %}
                                    <!-- 숫자 필드 -->
                                    {% set _nt = 'integer' if col.input_type == 'number_integer' else 'float' %}
                                    <input type="number" 
                                           class="{{ section.section_key|replace('_', '-') }}-input" 
                                           data-field="{{ col.column_key }}"
                                           data-section="{{ section.section_key }}"
                                           data-number-type="{{ _nt }}"
                                           step="{% if _nt == 'integer' %}1{% else %}any{% endif %}"
                                           oninput="validateNumberInput(this)"
                                           onkeypress="return isNumberKey(event, this)"
                                           value="{{ col_value }}">
                                           
                                {% elif render_type in ['linked','linked_text','linked_dept'] %}
                                    <!-- 연결된 필드 (읽기 전용) -->
                                    <input type="text" 
                                           class="{{ section.section_key|replace('_', '-') }}-input" 
                                           data-field="{{ col.column_key }}"
                                           data-section="{{ section.section_key }}"
                                           value="{{ col_value }}"
                                           readonly
                                           style="background-color: #f3f4f6;">
                                           
                                {% elif render_type in ['popup','popup_person','popup_company','popup_department','popup_building','popup_contractor'] %}
                                    <!-- 팝업 필드 -->
                                    <!-- ⚠️ IMPORTANT: btn-primary 유지, 아이콘 없이 "검색" 텍스트만 -->
                                    <!-- DO NOT CHANGE to btn-outline-secondary or add icons -->
                                    <div class="input-group">
                                        <input type="text" 
                                               id="{{ col.column_key }}"
                                               class="{{ section.section_key|replace('_', '-') }}-input" 
                                               data-field="{{ col.column_key }}"
                                               data-section="{{ section.section_key }}"
                                               value="{{ col_value }}"
                                               readonly>
                                        <button class="btn btn-sm btn-primary" 
                                                onclick="{% if render_type == 'popup_person' %}openPersonSearch{% elif render_type == 'popup_company' %}openCompanySearch{% elif render_type == 'popup_department' %}openDepartmentSearch{% elif render_type == 'popup_building' %}openBuildingSearch{% elif render_type == 'popup_contractor' %}openContractorSearch{% else %}openPopup{% endif %}('{{ col.column_key }}')">
                                                검색
                                            </button>
                                    </div>
                                    
                                {% elif col.column_type == 'list' %}
                                    {# 동일 column_key의 리스트 필드가 다른 섹션에도 있을 수 있어 중복 방지 #}
                                    {% if col.column_key in rendered_list_keys %}
                                        {# 이미 렌더링됨: 스킵 #}
                                    {% else %}
                                        {% set _ = rendered_list_keys.append(col.column_key) %}
                                    <!-- 리스트 필드는 라벨을 외부에서 출력하지 않고 컴포넌트 내부 제목만 사용 -->
                                    {% set col_value = custom_data.get(col.column_key, '[]') if custom_data else '[]' %}
                                    {% from 'includes/list_field_v3.html' import render_list_field %}
                                    {{ render_list_field(col, col_value, section, mode='edit') }}
                                    {% endif %}
                                    
                                {% elif col.column_type == 'textarea' %}
                                    <!-- 텍스트영역 필드 -->
                                    <textarea class="{{ section.section_key|replace('_', '-') }}-input" 
                                            data-field="{{ col.column_key }}"
                                            data-section="{{ section.section_key }}"
                                            rows="4">{{ col_value }}</textarea>

                                {% elif col.column_type == 'scoring' %}
                                    <!-- 채점 필드 -->
                                    <div class="scoring-field" data-field="{{ col.column_key }}" data-config="{{ col.scoring_config | tojson | e }}">
                                        <div class="scoring-items">
                                            <!-- 동적으로 생성될 채점 항목들 -->
                                        </div>
                                        <input type="hidden" 
                                               class="{{ section.section_key }}-input" 
                                               data-field="{{ col.column_key }}"
                                               data-section="{{ section.section_key }}"
                                               value="{{ col_value | tojson | e }}">
                                    </div>
                                    
                                {% elif col.column_type == 'score_total' %}
                                    <!-- 총점 필드 (자동 계산) -->
                                    <div class="score-total-field">
                                        <div class="score-display">
                                            <span class="score-value">0</span>점
                                            <div class="score-breakdown">
                                                <span class="critical-count">중대: 0</span>
                                                <span class="major-count">주요: 0</span>
                                                <span class="minor-count">경미: 0</span>
                                                <span class="bonus-count">가점: 0</span>
                                            </div>
                                        </div>
                                        <input type="hidden" 
                                               class="{{ section.section_key }}-input" 
                                               data-field="{{ col.column_key }}"
                                               data-section="{{ section.section_key }}"
                                               value="{{ col_value }}">
                                    </div>
                                            
                                            
                                {% else %}
                                    <!-- 기본 텍스트 필드 -->
                                    <input type="text" 
                                           class="{{ section.section_key|replace('_', '-') }}-input" 
                                           data-field="{{ col.column_key }}"
                                           data-section="{{ section.section_key }}"
                                           value="{{ col_value }}">
                                {% endif %}
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
    {% endfor %}

    <!-- 상세내용 영역 -->
    <div class="section detail-content-section">
        <div class="section-header">
            <h3 class="section-title">상세내용</h3>
        </div>
        <div class="section-content">
            <div class="content-editor">
                <!-- 에디터 초기화 개선 - data-content 패턴 사용 -->
                <div id="detailed-content" class="editable-content" data-content="{{ (instruction.detailed_content or '') | tojson }}"></div>
            </div>
        </div>
    </div>

    <!-- 첨부파일 영역 (공통 컴포넌트) -->
    {% from 'includes/attachment_section.html' import render_attachment_section %}
    {{ render_attachment_section(attachments, 'safety_instruction') }}

    <!-- 저장 버튼 영역 -->
    <div class="save-section">
        <button class="btn-save" onclick="showEditPasswordModal()">수정완료</button>
    </div>

    <!-- 비밀번호 입력 모달 -->
    <div id="edit-password-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>편집 권한 확인</h3>
                <span class="close" onclick="closeEditPasswordModal()">&times;</span>
            </div>
            <div class="modal-body">
                <p>편집을 위해 비밀번호를 입력해주세요.</p>
                <input type="password" id="edit-password-input" placeholder="비밀번호" class="password-field">
                <div class="modal-buttons">
                    <button class="btn-confirm" onclick="verifyPasswordAndSave()">확인</button>
                    <button class="btn-cancel" onclick="closeEditPasswordModal()">취소</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 스타일 -->
<link rel="stylesheet" href="/static/styles/safety-instruction-detail.css">

<script>
// 섹션 정보
const sections = {{ sections | tojson | safe }};
const sectionColumns = {{ section_columns | tojson | safe }};
const issueNumber = "{{ instruction.issue_number }}";

// 섹션 토글
function toggleSection(sectionId) {
    const content = document.getElementById(sectionId + '-content');
    const icon = event.target;
    
    if (content.style.display === 'none') {
        content.style.display = 'block';
        icon.textContent = '▲';
    } else {
        content.style.display = 'none';
        icon.textContent = '▼';
    }
}

// 첨부파일 관련 변수와 함수는 공통 컴포넌트에서 제공됨

// 동적 필드 수집 함수
function collectDynamicFields() {
    const data = {};
    
    // 모든 섹션 순회
    sections.forEach(section => {
        const sectionInputs = document.querySelectorAll(`[data-section="${section.section_key}"]`);
        
        sectionInputs.forEach(input => {
            const fieldKey = input.dataset.field;
            let value = '';
            
            if (input.tagName === 'SELECT') {
                value = input.value;
            } else if (input.type === 'checkbox') {
                value = input.checked ? '1' : '0';
            } else if (input.tagName === 'TEXTAREA') {
                value = input.value;
            } else if (input.classList.contains('value')) {
                // 읽기 전용 div
                return;
            } else {
                value = input.value;
            }
            
            // 리스트 필드 처리: data-field-type 또는 JSON 배열 문자열 판별
            if ((input.getAttribute('data-field-type') === 'list' || 
                 (typeof value === 'string' && value.trim().startsWith('['))) && value) {
                try {
                    const parsed = JSON.parse(value);
                    data[fieldKey] = Array.isArray(parsed) ? parsed : value;
                } catch(e) {
                    data[fieldKey] = value;
                }
            } else {
                data[fieldKey] = value;
            }
        });
    });
    
    return data;
}

// 수정 함수
function updateSafetyInstruction() {
    const formData = new FormData();
    
    // 발부번호
    formData.append('issue_number', issueNumber);
    
    // 상세내용 처리 - CKEditor 또는 div에서 값 가져오기
    const contentDiv = document.getElementById('detailed-content');
    let detailedContent = '';
    
    // CKEditor가 있다면 CKEditor에서 값 가져오기
    if (window.RichText && typeof window.RichText.getData === 'function') {
        detailedContent = window.RichText.getData();
    } else if (window.editorInstance && typeof window.editorInstance.getData === 'function') {
        detailedContent = window.editorInstance.getData();
    } else if (contentDiv) {
        detailedContent = contentDiv.innerHTML || '';
    }
    
    formData.append('detailed_content', detailedContent);
    
    // 동적 필드 수집
    const dynamicData = collectDynamicFields();
    
    // 각 필드를 FormData에 추가 (서버에서 필요한 경우 사용)
    for (const [key, value] of Object.entries(dynamicData)) {
        formData.append(key, value);
    }
    
    // base_fields와 custom_data 모두 전송
    // base_fields: 기본 컬럼들 (화이트리스트)
    const baseFields = {};
    const baseFieldsList = [
        'issue_number', 'instruction_name', 'instruction_date', 'workplace',
        'instruction_type', 'violation_category', 'created_at'
    ];
    
    baseFieldsList.forEach(field => {
        if (dynamicData[field] !== undefined) {
            baseFields[field] = dynamicData[field];
        }
    });
    
    formData.append('base_fields', JSON.stringify(baseFields));
    
    // custom_data: 모든 동적 필드 포함
    const customData = { ...dynamicData };
    formData.append('custom_data', JSON.stringify(customData));
    
    // 새 첨부파일 처리 (공통 컴포넌트 변수 사용)
    if (typeof pendingFiles !== 'undefined') {
        pendingFiles.forEach((file, index) => {
            formData.append('files', file);
        });
    }
    
    // 삭제된 첨부파일 정보
    if (typeof deletedAttachments !== 'undefined') {
        formData.append('deleted_attachments', JSON.stringify(deletedAttachments));
    }
    
    // 첨부파일 설명 정보
    const attachmentDescriptions = [];
    document.querySelectorAll('.attachment-desc').forEach((input, index) => {
        const row = input.closest('tr') || input.closest('.attachment-row');
        attachmentDescriptions.push({
            id: row ? (row.dataset.id || row.dataset.attachmentId || null) : null,
            description: input.value || '',
            isNew: row ? (row.dataset.isNew === 'true') : false
        });
    });
    formData.append('attachment_data', JSON.stringify(attachmentDescriptions));
    
    // 서버로 전송
    fetch('/update-safety-instruction', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('환경안전 지시서가 성공적으로 수정되었습니다.');
            
            // 팝업 모드인 경우 부모 창 새로고침
            {% if is_popup %}
            if (window.opener && !window.opener.closed) {
                window.opener.location.reload();
            }
            {% endif %}
            
            // 현재 창 새로고침 (캐시 무시)
            window.location.href = window.location.href + '&t=' + new Date().getTime();
        } else {
            alert('수정 실패: ' + (data.message || '알 수 없는 오류'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('수정 중 오류가 발생했습니다.');
    });
}

// 비밀번호 모달 관련 함수들
function showEditPasswordModal() {
    document.getElementById('edit-password-modal').style.display = 'block';
    document.getElementById('edit-password-input').focus();
}

function closeEditPasswordModal() {
    document.getElementById('edit-password-modal').style.display = 'none';
    document.getElementById('edit-password-input').value = '';
}

function verifyPasswordAndSave() {
    const password = document.getElementById('edit-password-input').value;
    
    if (!password) {
        alert('비밀번호를 입력해주세요.');
        return;
    }
    
    // 비밀번호가 admin123인지 확인
    if (password === 'admin123') {
        closeEditPasswordModal();
        updateSafetyInstruction();
    } else {
        alert('비밀번호가 올바르지 않습니다.');
        document.getElementById('edit-password-input').value = '';
        document.getElementById('edit-password-input').focus();
    }
}

// 팝업 열기 함수
function openPopup(fieldKey) {
    // 팝업 구현 (필요시 추가)
    alert('팝업 기능은 추가 구현이 필요합니다.');
}

// 페이지 로드 시 초기화
document.addEventListener('DOMContentLoaded', function() {
    // 에디터 초기화
    const contentDiv = document.getElementById('detailed-content');
    if (contentDiv) {
        const dataContent = contentDiv.getAttribute('data-content');
        if (dataContent) {
            try {
                const content = JSON.parse(dataContent);
                contentDiv.innerHTML = content || '';
            } catch(e) {
                console.log('상세내용 파싱 오류:', e);
            }
        }
        
        // contentEditable 활성화
        contentDiv.contentEditable = true;
    }
    
    // 비밀번호 입력 엔터 키 이벤트
    const passwordInput = document.getElementById('edit-password-input');
    if (passwordInput) {
        passwordInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                verifyPasswordAndSave();
            }
        });
    }
});

// 공통 팝업 핸들러들 (accident-detail.html과 동일)
function openPersonSearch(fieldKey) {
    const width = 1000;
    const height = 600;
    const left = (screen.width - width) / 2;
    const top = (screen.height - height) / 2;
    
    const popupOptions = [
        `width=${width}`,
        `height=${height}`,
        `left=${left}`,
        `top=${top}`,
        'scrollbars=yes',
        'resizable=yes'
    ].join(',');
    
    const popupUrl = `/search-popup?type=person&field=${fieldKey}`;
    const popup = window.open(popupUrl, 'personSearch', popupOptions);
    
    if (!popup || popup.closed) {
        alert('팝업이 차단되었습니다. 브라우저의 팝업 차단을 해제해주세요.');
        return;
    }
    
    window.receivePersonSelection = function(fieldKey, data) {
        const mainField = document.getElementById(fieldKey);
        if (mainField) {
            mainField.value = data.employee_name || data.name || '';
        }
        
        // ID 필드 업데이트
        const idField = document.getElementById(fieldKey + '_id');
        if (idField) {
            idField.value = data.employee_id || data.id || '';
        }
        
        // 부서 필드 업데이트
        const deptField = document.getElementById(fieldKey + '_dept');
        if (deptField) {
            deptField.value = data.department_name || data.department || '';
        }
    };
    
    popup.focus();
}

function openCompanySearch(fieldKey) {
    const width = 1000;
    const height = 600;
    const left = (screen.width - width) / 2;
    const top = (screen.height - height) / 2;
    
    const popupOptions = [
        `width=${width}`,
        `height=${height}`,
        `left=${left}`,
        `top=${top}`,
        'scrollbars=yes',
        'resizable=yes'
    ].join(',');
    
    const popupUrl = `/search-popup?type=company&field=${fieldKey}`;
    const popup = window.open(popupUrl, 'companySearch', popupOptions);
    
    if (!popup || popup.closed) {
        alert('팝업이 차단되었습니다. 브라우저의 팝업 차단을 해제해주세요.');
        return;
    }
    
    window.receiveCompanySelection = function(fieldKey, data) {
        document.getElementById(fieldKey).value = data.company_name || '';
        
        // 사업자번호 linked 필드들 업데이트
        const businessNumberFields = [
            fieldKey + '_business_number',
            fieldKey + '_bizno'
        ];
        
        businessNumberFields.forEach(fieldId => {
            const bnField = document.getElementById(fieldId);
            if (bnField) bnField.value = data.business_number || '';
        });
    };
    
    popup.focus();
}

function openBuildingSearch(fieldKey) {
    const width = 1000;
    const height = 600;
    const left = (screen.width - width) / 2;
    const top = (screen.height - height) / 2;
    
    const popupOptions = [
        `width=${width}`,
        `height=${height}`,
        `left=${left}`,
        `top=${top}`,
        'scrollbars=yes',
        'resizable=yes'
    ].join(',');
    
    const popupUrl = `/search-popup?type=building&field=${fieldKey}`;
    const popup = window.open(popupUrl, 'buildingSearch', popupOptions);
    
    if (!popup || popup.closed) {
        alert('팝업이 차단되었습니다. 브라우저의 팝업 차단을 해제해주세요.');
        return;
    }
    
    window.receiveBuildingSelection = function(fieldKey, data) {
        document.getElementById(fieldKey).value = data.building_name || '';
        const codeField = document.getElementById(fieldKey + '_code');
        if (codeField) codeField.value = data.building_code || '';
    };
    
    popup.focus();
}

function openDepartmentSearch(fieldKey) {
    const width = 1000;
    const height = 600;
    const left = (screen.width - width) / 2;
    const top = (screen.height - height) / 2;
    
    const popupOptions = [
        `width=${width}`,
        `height=${height}`,
        `left=${left}`,
        `top=${top}`,
        'scrollbars=yes',
        'resizable=yes'
    ].join(',');
    
    const popupUrl = `/search-popup?type=department&field=${fieldKey}`;
    const popup = window.open(popupUrl, 'departmentSearch', popupOptions);
    
    if (!popup || popup.closed) {
        alert('팝업이 차단되었습니다. 브라우저의 팝업 차단을 해제해주세요.');
        return;
    }
    
    window.receiveDepartmentSelection = function(fieldKey, data) {
        const mainField = document.getElementById(fieldKey);
        if (mainField) {
            mainField.value = data.dept_name || data.department_name || '';
        }
        
        const codeField = document.getElementById(fieldKey + '_code');
        if (codeField) {
            codeField.value = data.dept_code || data.department_code || '';
        }
    };
    
    popup.focus();
}

function openContractorSearch(fieldKey) {
    const width = 1000;
    const height = 600;
    const left = (screen.width - width) / 2;
    const top = (screen.height - height) / 2;
    
    const popupOptions = [
        `width=${width}`,
        `height=${height}`,
        `left=${left}`,
        `top=${top}`,
        'scrollbars=yes',
        'resizable=yes'
    ].join(',');
    
    const popupUrl = `/search-popup?type=contractor&field=${fieldKey}`;
    const popup = window.open(popupUrl, 'contractorSearch', popupOptions);
    
    if (!popup || popup.closed) {
        alert('팝업이 차단되었습니다. 브라우저의 팝업 차단을 해제해주세요.');
        return;
    }
    
    window.receiveContractorSelection = function(fieldKey, data) {
        const mainField = document.getElementById(fieldKey);
        if (mainField) {
            mainField.value = data.worker_name || '';
        }
        
        const linkedFields = ['_id', '_company_name', '_business_number'];
        linkedFields.forEach(suffix => {
            const field = document.getElementById(fieldKey + suffix);
            if (field) {
                let value = '';
                if (suffix === '_id') value = data.worker_id || '';
                else if (suffix === '_company_name') value = data.company_name || '';
                else if (suffix === '_business_number') value = data.business_number || '';
                
                field.value = value;
            }
        });
    };
    
    popup.focus();
}

// 숫자 입력 유효성 검사 함수들
function isNumberKey(evt, inputEl) {
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    var t = (inputEl && inputEl.getAttribute('data-number-type')) || 'float';
    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        if (t === 'float' && charCode === 46) return true;
        return false;
    }
    return true;
}

function validateNumberInput(input) {
    const t = input.getAttribute('data-number-type') || 'float';
    const value = input.value;
    const numericValue = t === 'integer' ? value.replace(/[^0-9]/g, '') : value.replace(/[^0-9.]/g, '');
    
    if (value !== numericValue) {
        input.value = numericValue;
        showValidationMessage(input, t === 'integer' ? '정수만 입력할 수 있습니다.' : '숫자만 입력할 수 있습니다.');
    }
}

function showValidationMessage(input, message) {
    const existingMessage = input.parentNode.querySelector('.validation-message');
    if (existingMessage) {
        existingMessage.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'validation-message';
    messageDiv.style.color = '#dc3545';
    messageDiv.style.fontSize = '12px';
    messageDiv.style.marginTop = '5px';
    messageDiv.textContent = message;
    
    input.parentNode.appendChild(messageDiv);
    
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.remove();
        }
    }, 3000);
}
</script>

<style>
/* 그리드 레이아웃 핵심 스타일 */
.safety-instruction-detail-container {
    padding: 20px;
}

.section {
    background: white;
    border: 1px solid #e1e5e9;
    border-radius: 8px;
    margin-bottom: 20px;
    overflow: hidden;
}

.section-header {
    background: #f8f9fa;
    padding: 15px 20px;
    border-bottom: 1px solid #e1e5e9;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.section-title {
    font-size: 16px;
    font-weight: 600;
    color: #333;
    margin: 0;
}

.collapse-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 5px 10px;
    color: #666;
}

.section-content {
    padding: 20px;
}

.info-table {
    width: 100%;
}

.info-row {
    display: grid !important;
    grid-template-columns: repeat(4, 1fr) !important;
    gap: 16px !important;
    margin-bottom: 16px !important;
}

.info-cell {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.info-cell label {
    font-weight: 600;
    color: #374151;
    font-size: 14px;
    margin-bottom: 4px;
}

.info-cell input,
.info-cell select,
.info-cell textarea,
.info-cell .value {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    font-size: 14px;
}

.info-cell textarea {
    resize: vertical;
    min-height: 80px;
}

.info-cell.span-2 {
    grid-column: span 2 !important;
}

.info-cell.span-3 {
    grid-column: span 3 !important;
}

.info-cell.span-4 {
    grid-column: span 4 !important;
}

.input-group {
    display: flex;
    gap: 4px;
}

.input-group input {
    flex: 1;
}

.input-group button {
    padding: 4px 8px;
    background: #f3f4f6;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    cursor: pointer;
}

.input-group button:hover {
    background: #e5e7eb;
}

/* 첨부파일 섹션 */
.attachments-section .section-header {
    display: flex;
    align-items: center;
    gap: 15px;
}

.btn-add-file {
    padding: 6px 12px;
    background: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    margin-left: auto;
    margin-right: 10px;
}

.btn-add-file:hover {
    background: #218838;
}

.file-count {
    font-size: 14px;
    color: #666;
}

/* 첨부파일 테이블 스타일은 attachment_section.html에서 제공됨 */

.btn-delete {
    padding: 4px 8px;
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
}

.btn-delete:hover {
    background: #c82333;
}

.file-desc-input {
    width: 100%;
    padding: 4px 8px;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    font-size: 12px;
}

/* 저장 버튼 영역 */
.save-section {
    padding: 20px;
    text-align: center;
}

.btn-save {
    padding: 10px 30px;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
}

.btn-save:hover {
    background: #2563eb;
}

.btn-cancel {
    padding: 10px 30px;
    background: #6b7280;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    margin-left: 10px;
}

.btn-cancel:hover {
    background: #4b5563;
}

/* 비밀번호 모달 */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 0;
    border: none;
    border-radius: 8px;
    width: 400px;
    max-width: 90%;
    box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.modal-header {
    padding: 20px 25px 15px;
    border-bottom: 1px solid #e1e5e9;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h3 {
    margin: 0;
    color: #333;
    font-size: 18px;
    font-weight: 600;
}

.close {
    color: #999;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    line-height: 1;
}

.close:hover {
    color: #333;
}

.modal-body {
    padding: 25px;
}

.modal-body p {
    margin: 0 0 20px 0;
    color: #555;
    font-size: 14px;
}

.password-field {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #e1e5e9;
    border-radius: 4px;
    font-size: 14px;
    margin-bottom: 20px;
    box-sizing: border-box;
}

.password-field:focus {
    outline: none;
    border-color: #2f5fd3;
    box-shadow: 0 0 0 2px rgba(47, 95, 211, 0.1);
}

.modal-buttons {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
}

.btn-confirm, .modal-buttons .btn-cancel {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    min-width: 80px;
}

.btn-confirm {
    background: #2f5fd3;
    color: white;
}

.btn-confirm:hover {
    background: #1d4ed8;
}

.modal-buttons .btn-cancel {
    background: #6b7280;
    color: white;
}

.modal-buttons .btn-cancel:hover {
    background: #4b5563;
}

/* 상세내용 섹션 */
.detail-content-section .section-content {
    padding: 20px;
}

.content-editor {
    width: 100%;
}

.editable-content {
    min-height: 300px;
    padding: 15px;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    background: white;
    font-size: 14px;
    line-height: 1.6;
    outline: none;
}

.editable-content:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.editable-content p {
    margin: 10px 0;
}

.editable-content br {
    line-height: 1.6;
}

.editable-content table {
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
}

.editable-content table td,
.editable-content table th {
    border: 1px solid #e1e5e9;
    padding: 8px 12px;
    text-align: left;
}

.editable-content table th {
    background: #f8f9fa;
    font-weight: 600;
}

.editable-content table tr:nth-child(even) {
    background: #f8f9fa;
}
</style>

<!-- 공통 첨부파일 스크립트와 스타일 import -->
{% from 'includes/attachment_section.html' import attachment_scripts, attachment_styles %}
{{ attachment_styles() }}
{{ attachment_scripts() }}

{% endblock %}
