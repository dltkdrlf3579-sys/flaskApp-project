=== app.py ===
import os
from flask import Flask, render_template, request, session, redirect, url_for, flash
from werkzeug.serving import run_simple
from config.menu import MENU_CONFIG
import sqlite3

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'default-secret-key-for-dev')

DB_PATH = os.environ.get('DB_PATH', 'portal.db')
PASSWORD = os.environ.get('EDIT_PASSWORD', 'admin123')

def init_db():
    """메뉴 설정의 소메뉴를 DB로 시드 (없을 때만)."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS pages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT UNIQUE,
            title TEXT,
            content TEXT
        )
    ''')
    
    # 메뉴 설정에서 페이지 자동 생성
    for category in MENU_CONFIG:
        for submenu in category['submenu']:
            cursor.execute("SELECT COUNT(*) FROM pages WHERE url = ?", (submenu['url'],))
            if cursor.fetchone()[0] == 0:
                cursor.execute(
                    "INSERT INTO pages (url, title, content) VALUES (?, ?, ?)",
                    (submenu['url'], submenu['title'], 
                     f"<h1>{submenu['title']}</h1><p>이 페이지의 내용을 편집하세요.</p>")
                )
    
    conn.commit()
    conn.close()

@app.before_request
def before_request():
    init_db()

@app.route("/")
def index():
    return render_template("index.html", menu=MENU_CONFIG)

@app.route("/<path:url>")
def page_view(url):
    conn = sqlite3.connect(DB_PATH)
    page = conn.execute("SELECT * FROM pages WHERE url = ?", (url,)).fetchone()
    conn.close()
    
    if not page:
        return "Page not found", 404
    
    return render_template("page.html", 
                         page={'url': page[1], 'title': page[2], 'content': page[3]},
                         menu=MENU_CONFIG)

@app.route("/<path:url>/edit", methods=["GET", "POST"])
def page_edit(url):
    if not session.get('edit_mode'):
        flash("편집 권한이 없습니다.", "error")
        return redirect(url_for('page_view', url=url))
    
    conn = sqlite3.connect(DB_PATH)
    page = conn.execute("SELECT * FROM pages WHERE url = ?", (url,)).fetchone()
    conn.close()
    
    if not page:
        return "Page not found", 404
    
    if request.method == "POST":
        title = request.form.get("title", "").strip()
        content = request.form.get("content", "").strip()
        
        if not title:
            title = "제목을 입력하세요."
        
        conn = sqlite3.connect(DB_PATH)
        conn.execute("UPDATE pages SET title = ?, content = ? WHERE url = ?", 
                    (title, content, url))
        conn.commit()
        conn.close()
        
        flash("저장되었습니다.", "success")
        return redirect(url_for('page_view', url=url))
    
    return render_template("edit.html", 
                         page={'url': page[1], 'title': page[2], 'content': page[3]},
                         menu=MENU_CONFIG)

@app.route("/unlock", methods=["GET", "POST"])
def unlock():
    if request.method == "POST":
        password = request.form.get("password", "")
        if password == PASSWORD:
            session['edit_mode'] = True
            flash("편집모드가 활성화되었습니다.", "success")
            return redirect(url_for('index'))
        else:
            flash("비밀번호가 올바르지 않습니다.", "error")
    
    return render_template("unlock.html", menu=MENU_CONFIG)

@app.route("/lock")
def lock():
    session.pop('edit_mode', None)
    flash("편집모드를 종료했습니다.", "info")
    return redirect(url_for('index'))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
=== requirements.txt ===
Flask>=3.0
Werkzeug>=3.1
MarkupSafe>=1.0
=== templates\base.html ===
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}PORTAL{% endblock %}</title>
    <style>
        {% block style %}{% endblock %}
    </style>
</head>
<body>
    <!-- 상단 네비게이션 (DCInside 유사 스타일) -->
    <nav class="topbar">
      <div class="topbar-inner">
        <a class="brand" href="{{ url_for('index') }}">PORTAL</a>
        <ul class="nav-main" role="menubar" aria-label="메인 메뉴">
          {# 현재 활성 슬러그 파악 #}
          {% set active_slug = (request.view_args.get('url') if request.view_args else '') %}
          {% for m in menu %}
          <li class="nav-item has-sub
                     {% if active_slug and (active_slug in [sm.url for sm in m.submenu]) %} is-active{% endif %}">
            <a class="nav-link"
               href="#"
               role="menuitem"
               aria-haspopup="true"
               aria-expanded="false">{{ m.title }}</a>
            <ul class="submenu" role="menu">
              {% for sm in m.submenu %}
              <li role="none">
                <a role="menuitem"
                   class="submenu-link {% if active_slug == sm.url %} active{% endif %}"
                   href="{{ url_for('page_view', url=sm.url) }}">{{ sm.title }}</a>
              </li>
              {% endfor %}
            </ul>
          </li>
          {% if not loop.last %}
          <li class="sep" aria-hidden="true">|</li>
          {% endif %}
          {% endfor %}
        </ul>
        <div class="right-tools">
          {% if session.get('edit_mode') %}
            <a class="btn-small" href="{{ url_for('lock') }}">편집 잠금</a>
          {% else %}
            <a class="btn-small" href="{{ url_for('unlock') }}">편집 해제</a>
          {% endif %}
        </div>
      </div>
    </nav>

    <style>
    /* ===== 상단 바(파란색) ===== */
    .topbar { background: #2f5fd3; position: sticky; top: 0; z-index: 1030; }
    .topbar-inner {
      max-width: 1200px; margin: 0 auto; height: 48px;
      display: flex; align-items: center; gap: 16px; padding: 0 12px;
    }
    .brand { color: #fff; font-weight: 700; text-decoration: none; letter-spacing: .3px; margin-right: 8px; }

    /* ===== 1차 메뉴 ===== */
    .nav-main { list-style: none; display: flex; align-items: stretch; gap: 4px; margin: 0; padding: 0; }
    .nav-item { position: relative; }
    .nav-link {
      color: #fff; text-decoration: none; font-weight: 600;
      padding: 10px 14px; border-radius: 2px; display: block; line-height: 28px;
    }
    .nav-link:hover, .nav-item.is-active > .nav-link { background: rgba(255,255,255,.15); }
    .sep { color: rgba(255,255,255,.65); align-self: center; padding: 0 6px; user-select: none; }

    /* ===== 2차 드롭다운 ===== */
    .submenu {
      position: absolute; left: 0; top: 100%;
      min-width: 180px; background: #fff; border: 1px solid #e5e7eb;
      border-radius: 4px; box-shadow: 0 8px 18px rgba(0,0,0,.08);
      padding: 6px 0; display: none; list-style: none; margin: 0;
    }
    .submenu-link {
      display: block; padding: 9px 12px; color: #222; text-decoration: none; white-space: nowrap; font-size: 14px;
    }
    .submenu-link:hover { background: #f3f5f7; }
    .submenu-link.active { color: #1b60d1; font-weight: 700; }

    /* ===== 우측 툴바 ===== */
    .right-tools { display: flex; align-items: center; gap: 8px; margin-left: auto; }
    .btn-small {
      color: #fff; text-decoration: none; font-size: 13px; padding: 6px 10px;
      border: 1px solid rgba(255,255,255,.3); border-radius: 3px;
    }
    .btn-small:hover { background: rgba(255,255,255,.1); color: #fff; }

    /* 데스크톱: 호버/포커스 시 표시 */
    @media (min-width: 992px) {
      .nav-item:hover > .submenu,
      .nav-item:focus-within > .submenu { display: block; }
    }

    /* 모바일: 가로 스크롤 + 탭으로 토글 */
    @media (max-width: 991.98px) {
      .topbar-inner { height: auto; flex-wrap: wrap; padding: 8px 10px; gap: 8px; }
      .brand { padding: 6px 0; }
      .nav-main { width: 100%; overflow-x: auto; white-space: nowrap; gap: 0; }
      .nav-link { padding: 8px 12px; }
      .sep { display: none; }
      .submenu {
        position: static; display: none; border: 1px solid #e5e7eb; border-top: none; box-shadow: none; border-radius: 0 0 4px 4px;
      }
      .nav-item.open > .submenu { display: block; }
      .right-tools { width: 100%; justify-content: flex-end; }
    }

    /* 컨텐츠 영역 */
    .container { max-width: 1200px; margin: 20px auto; padding: 0 12px; }
    
    /* 플래시 메시지 */
    .flash-messages { margin: 20px auto; max-width: 1200px; padding: 0 12px; }
    .alert { padding: 12px 16px; margin-bottom: 16px; border-radius: 4px; font-size: 14px; }
    .alert-success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
    .alert-danger { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    .alert-info { background: #cce7f0; color: #0c5460; border: 1px solid #b8daff; }
    </style>

    <!-- 플래시 메시지 -->
    <div class="flash-messages">
        {% for message in get_flashed_messages(with_categories=true) %}
            {% set category, message = message %}
            <div class="alert alert-{{ 'danger' if category == 'error' else 'success' if category == 'success' else 'info' }}" role="alert">
                {{ message }}
            </div>
        {% endfor %}
    </div>

    <div class="container">
        {% block content %}{% endblock %}
    </div>

    <!-- 모바일 토글용 짧은 스크립트 (데스크톱에서는 무시) -->
    <script>
    (() => {
      const isDesktop = () => window.matchMedia('(min-width: 992px)').matches;
      document.querySelectorAll('.nav-item.has-sub > .nav-link').forEach(a => {
        a.addEventListener('click', (e) => {
          if (isDesktop()) return; // 데스크톱은 호버로 처리
          e.preventDefault();
          const li = e.currentTarget.closest('.nav-item');
          // 현재 항목만 열고 나머지는 닫기
          document.querySelectorAll('.nav-item.has-sub.open').forEach(x => { if (x !== li) x.classList.remove('open'); });
          li.classList.toggle('open');
          // aria-expanded 업데이트
          a.setAttribute('aria-expanded', li.classList.contains('open') ? 'true' : 'false');
        });
      });
    })();
    </script>
</body>
</html>
=== templates\edit.html ===
{% extends "base.html" %}
{% block title %}편집: {{ page.title }}{% endblock %}
{% block content %}
<h1 class="h3 mb-3">페이지 편집</h1>
<form method="post">
    <div class="mb-3">
        <label class="form-label">제목</label>
        <input type="text" name="title" class="form-control" value="{{ page.title }}">
    </div>
    <div class="mb-3">
        <label class="form-label">본문 (HTML 허용)</label>
        <textarea name="content" class="form-control" rows="14">{{ page.content }}</textarea>
        <div class="form-text">간단한 HTML 태그 사용 가능. (예: &lt;h4&gt;, &lt;p&gt;, &lt;strong&gt;)</div>
    </div>
    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">저장</button>
        <a class="btn btn-secondary" href="{{ url_for('page_view', url=page.url) }}">취소</a>
    </div>
</form>
{% endblock %}
=== templates\index.html ===
{% extends "base.html" %}
{% block title %}메인{% endblock %}
{% block content %}
<div class="text-center py-4">
    <h1 class="display-4">메인화면</h1>
    <p class="lead fs-5 text-muted">상단 대메뉴에서 소메뉴를 선택하세요.</p>
</div>
{% endblock %}
=== templates\page.html ===
{% extends "base.html" %}
{% block title %}{{ page.title }}{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center border-bottom pb-3 mb-3">
    <h1 class="h3 mb-0">{{ page.title }}</h1>
    {% if session.get('edit_mode') %}
        <a class="btn btn-outline-primary btn-sm" href="{{ url_for('page_edit', url=page.url) }}">편집</a>
    {% endif %}
</div>
<div class="content">
    <div class="mb-4">
        {{ page.content|safe }}
    </div>
</div>
{% endblock %}
=== templates\unlock.html ===
{% extends "base.html" %}
{% block title %}편집해제{% endblock %}
{% block content %}
<div class="row justify-content-center">
    <div class="col-md-4">
        <h1 class="h3 mb-3">편집해제</h1>
        <form method="post" action="{{ url_for('unlock') }}">
            <div class="mb-3">
                <label class="form-label">공유 비밀번호</label>
                <input type="password" name="password" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">확인</button>
            <div class="form-text mt-2">*올바른 비밀번호 입력 시 편집 버튼 활성화</div>
        </form>
    </div>
</div>
{% endblock %}